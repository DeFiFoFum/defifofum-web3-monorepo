/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  LiquidityHelper,
  LiquidityHelperInterface,
} from "../LiquidityHelper";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "factoryAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "factory",
    outputs: [
      {
        internalType: "contract IApeFactory",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "lpBalance",
        type: "uint256",
      },
    ],
    name: "getLiquidityAmountsOut",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "totalLpSupply",
            type: "uint256",
          },
          {
            internalType: "contract IERC20",
            name: "token0",
            type: "address",
          },
          {
            internalType: "string",
            name: "token0Symbol",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "token0Out",
            type: "uint256",
          },
          {
            internalType: "contract IERC20",
            name: "token1",
            type: "address",
          },
          {
            internalType: "string",
            name: "token1Symbol",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "token1Out",
            type: "uint256",
          },
        ],
        internalType: "struct LiquidityHelper.LiquidityOutInfo",
        name: "liquidityOutInfo",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pairAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "lpBalance",
        type: "uint256",
      },
    ],
    name: "getLiquidityAmountsOut",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "totalLpSupply",
            type: "uint256",
          },
          {
            internalType: "contract IERC20",
            name: "token0",
            type: "address",
          },
          {
            internalType: "string",
            name: "token0Symbol",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "token0Out",
            type: "uint256",
          },
          {
            internalType: "contract IERC20",
            name: "token1",
            type: "address",
          },
          {
            internalType: "string",
            name: "token1Symbol",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "token1Out",
            type: "uint256",
          },
        ],
        internalType: "struct LiquidityHelper.LiquidityOutInfo",
        name: "liquidityOutInfo",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pairAddress",
        type: "address",
      },
    ],
    name: "getPairBalances",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "totalLpSupply",
            type: "uint256",
          },
          {
            internalType: "contract IERC20",
            name: "token0",
            type: "address",
          },
          {
            internalType: "string",
            name: "token0Symbol",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "token0Balance",
            type: "uint256",
          },
          {
            internalType: "contract IERC20",
            name: "token1",
            type: "address",
          },
          {
            internalType: "string",
            name: "token1Symbol",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "token1Balance",
            type: "uint256",
          },
        ],
        internalType: "struct LiquidityHelper.PairInfo",
        name: "pairInfo",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
    ],
    name: "getPairBalances",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "totalLpSupply",
            type: "uint256",
          },
          {
            internalType: "contract IERC20",
            name: "token0",
            type: "address",
          },
          {
            internalType: "string",
            name: "token0Symbol",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "token0Balance",
            type: "uint256",
          },
          {
            internalType: "contract IERC20",
            name: "token1",
            type: "address",
          },
          {
            internalType: "string",
            name: "token1Symbol",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "token1Balance",
            type: "uint256",
          },
        ],
        internalType: "struct LiquidityHelper.PairInfo",
        name: "pairInfo",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

export class LiquidityHelper__factory {
  static readonly abi = _abi;
  static createInterface(): LiquidityHelperInterface {
    return new utils.Interface(_abi) as LiquidityHelperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LiquidityHelper {
    return new Contract(address, _abi, signerOrProvider) as LiquidityHelper;
  }
}
