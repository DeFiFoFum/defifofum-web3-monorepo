/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace LiquidityHelper {
  export type LiquidityOutInfoStruct = {
    totalLpSupply: BigNumberish;
    token0: string;
    token0Symbol: string;
    token0Out: BigNumberish;
    token1: string;
    token1Symbol: string;
    token1Out: BigNumberish;
  };

  export type LiquidityOutInfoStructOutput = [
    BigNumber,
    string,
    string,
    BigNumber,
    string,
    string,
    BigNumber
  ] & {
    totalLpSupply: BigNumber;
    token0: string;
    token0Symbol: string;
    token0Out: BigNumber;
    token1: string;
    token1Symbol: string;
    token1Out: BigNumber;
  };

  export type PairInfoStruct = {
    totalLpSupply: BigNumberish;
    token0: string;
    token0Symbol: string;
    token0Balance: BigNumberish;
    token1: string;
    token1Symbol: string;
    token1Balance: BigNumberish;
  };

  export type PairInfoStructOutput = [
    BigNumber,
    string,
    string,
    BigNumber,
    string,
    string,
    BigNumber
  ] & {
    totalLpSupply: BigNumber;
    token0: string;
    token0Symbol: string;
    token0Balance: BigNumber;
    token1: string;
    token1Symbol: string;
    token1Balance: BigNumber;
  };
}

export interface LiquidityHelperInterface extends utils.Interface {
  functions: {
    "factory()": FunctionFragment;
    "getLiquidityAmountsOut(address,address,uint256)": FunctionFragment;
    "getLiquidityAmountsOut(address,uint256)": FunctionFragment;
    "getPairBalances(address)": FunctionFragment;
    "getPairBalances(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "factory"
      | "getLiquidityAmountsOut(address,address,uint256)"
      | "getLiquidityAmountsOut(address,uint256)"
      | "getPairBalances(address)"
      | "getPairBalances(address,address)"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getLiquidityAmountsOut(address,address,uint256)",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityAmountsOut(address,uint256)",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPairBalances(address)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPairBalances(address,address)",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityAmountsOut(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityAmountsOut(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPairBalances(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPairBalances(address,address)",
    data: BytesLike
  ): Result;

  events: {};
}

export interface LiquidityHelper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LiquidityHelperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    factory(overrides?: CallOverrides): Promise<[string]>;

    "getLiquidityAmountsOut(address,address,uint256)"(
      tokenA: string,
      tokenB: string,
      lpBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [LiquidityHelper.LiquidityOutInfoStructOutput] & {
        liquidityOutInfo: LiquidityHelper.LiquidityOutInfoStructOutput;
      }
    >;

    "getLiquidityAmountsOut(address,uint256)"(
      pairAddress: string,
      lpBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [LiquidityHelper.LiquidityOutInfoStructOutput] & {
        liquidityOutInfo: LiquidityHelper.LiquidityOutInfoStructOutput;
      }
    >;

    "getPairBalances(address)"(
      pairAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [LiquidityHelper.PairInfoStructOutput] & {
        pairInfo: LiquidityHelper.PairInfoStructOutput;
      }
    >;

    "getPairBalances(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<
      [LiquidityHelper.PairInfoStructOutput] & {
        pairInfo: LiquidityHelper.PairInfoStructOutput;
      }
    >;
  };

  factory(overrides?: CallOverrides): Promise<string>;

  "getLiquidityAmountsOut(address,address,uint256)"(
    tokenA: string,
    tokenB: string,
    lpBalance: BigNumberish,
    overrides?: CallOverrides
  ): Promise<LiquidityHelper.LiquidityOutInfoStructOutput>;

  "getLiquidityAmountsOut(address,uint256)"(
    pairAddress: string,
    lpBalance: BigNumberish,
    overrides?: CallOverrides
  ): Promise<LiquidityHelper.LiquidityOutInfoStructOutput>;

  "getPairBalances(address)"(
    pairAddress: string,
    overrides?: CallOverrides
  ): Promise<LiquidityHelper.PairInfoStructOutput>;

  "getPairBalances(address,address)"(
    tokenA: string,
    tokenB: string,
    overrides?: CallOverrides
  ): Promise<LiquidityHelper.PairInfoStructOutput>;

  callStatic: {
    factory(overrides?: CallOverrides): Promise<string>;

    "getLiquidityAmountsOut(address,address,uint256)"(
      tokenA: string,
      tokenB: string,
      lpBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<LiquidityHelper.LiquidityOutInfoStructOutput>;

    "getLiquidityAmountsOut(address,uint256)"(
      pairAddress: string,
      lpBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<LiquidityHelper.LiquidityOutInfoStructOutput>;

    "getPairBalances(address)"(
      pairAddress: string,
      overrides?: CallOverrides
    ): Promise<LiquidityHelper.PairInfoStructOutput>;

    "getPairBalances(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<LiquidityHelper.PairInfoStructOutput>;
  };

  filters: {};

  estimateGas: {
    factory(overrides?: CallOverrides): Promise<BigNumber>;

    "getLiquidityAmountsOut(address,address,uint256)"(
      tokenA: string,
      tokenB: string,
      lpBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLiquidityAmountsOut(address,uint256)"(
      pairAddress: string,
      lpBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPairBalances(address)"(
      pairAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPairBalances(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getLiquidityAmountsOut(address,address,uint256)"(
      tokenA: string,
      tokenB: string,
      lpBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLiquidityAmountsOut(address,uint256)"(
      pairAddress: string,
      lpBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPairBalances(address)"(
      pairAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPairBalances(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
